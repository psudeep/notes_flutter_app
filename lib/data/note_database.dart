// import 'dart:js_util';
import 'dart:io';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

import 'package:moor_flutter/moor_flutter.dart';
import '../../data/models/note.dart';

part 'note_database.g.dart'; // This file is generated by moor

class Notes extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get title => text().withLength(min: 1, max: 50)();
  TextColumn get content => text().nullable()();
  DateTimeColumn get createdAt => dateTime().nullable()();
}

@UseMoor(tables: [Notes])
class NoteDatabase {
  NoteDatabase() : super();

  @override
  int get schemaVersion => 1;

  static Future<Database> openDatabase(join,
      {required Function(dynamic db, dynamic version) onCreate,
      required int version}) async {
    // Use the join function from the path package
    return openDatabase(
      join(await _getDatabaseFilePath()),
      onCreate: (db, version) {
        return db.execute(
          'CREATE TABLE notes(id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT, description TEXT)',
        );
      },
      version: 1,
    );
  }

  static Future<List<Note>> getAllNotesV2() async {
    final Database db = await openDatabase(
      p.join(await _getDatabaseFilePath()),
      onCreate: (db, version) {},
      version: 1,
    );
    final List<Map<String, dynamic>> maps = await db.query('notes');
    return List.generate(maps.length, (i) {
      return Note(
        // id: maps[i]['id'],
        title: maps[i]['title'],
        description: maps[i]['description'],
        createdAt: DateTime.now(),
      );
    });
  }

  static LazyDatabase _openConnection() {
    return LazyDatabase(() async {
      final dbPath = await _getDatabaseFilePath();
      return FlutterQueryExecutor.inDatabaseFolder(path: dbPath);
    });
  }

  dynamic get notes => null;

  Future<List<Note>> getAllNotes() => select(notes).get();

  Future<int> insertNote(Note note) => into(notes).insert(note);

  Future updateNote(Note note) => update(notes).replace(note);

  // Future deleteNoteById(int id) =>
  //     (deleteNoteById(notes)..where((tbl) => tbl.id.equals(id))).delete();

  update(Object notes) {}

  into(Object notes) {}

  select(Object notes) {}
}

Future<String> _getDatabaseFilePath() async {
  final dbDirectory = await getApplicationDocumentsDirectory();
  final dbPath = p.join(dbDirectory.path, 'db.sqlite');
  return dbPath;
}
